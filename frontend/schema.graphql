schema {
  query: RootQueryType
  mutation: RootMutationType
  subscription: RootSubscriptionType
}

type Account {
  email: String!
  id: String!
  isActive: Boolean!
  name: String!
  position: String!
  role: String!
}

input AccountInput {
  email: String!
  isActive: Boolean!
  name: String!
  password: String
  position: String!
  role: String!
}

type Count {
  count: Int!
}

type DeleteSuccessResponse {
  message: String
}

type HelloWorld {
  message: String
}

input LoginInput {
  email: String!
  password: String!
}

type LogoutResponse {
  message: String
}

input PaginatedSessionsParams {
  page: Int!
  startDate: String!
}

type RootMutationType {
  """Create new user account"""
  createAccount(input: AccountInput!): Account
  """Delete user account"""
  deleteAccount(input: String!): DeleteSuccessResponse
  """End active user session"""
  endUserSession(note: String): Session
  """Login as user with email and password"""
  login(input: LoginInput!): UserToken!
  """Logout user"""
  logout: LogoutResponse
  """Create user session or return active session"""
  startUserSession: Session!
  """Update new user account"""
  updateAccount(id: String!, input: AccountInput!): Account
}

type RootQueryType {
  account(id: String!): Account!
  accounts(query: String): [Account!]
  """Hello world!"""
  helloWorld: HelloWorld
  me: Account!
  sessions(params: SessionsParams): [SessionWithUser!]
  sessionsByUserId(id: String, params: PaginatedSessionsParams): [Session!]
  totalSessions(params: SessionsParams): Count!
  totalSessionsByUserId(id: String, params: PaginatedSessionsParams): Count!
  """Get active user session"""
  userActiveSession: Session
  userSessions(params: PaginatedSessionsParams): [Session!]
  userTodaySessions: [Session]
  userTotalSessions(params: PaginatedSessionsParams): Count!
  workHoursReport(endDate: String!, startDate: String!, userId: String): [WorkHoursSummary!]!
}

type RootSubscriptionType {
  updatedSessions(token: String!): Session
}

type Session {
  endTime: String
  id: String!
  note: String
  startTime: String!
  userId: String!
}

type SessionUser {
  email: String!
  id: String!
  name: String!
  position: String!
}

type SessionWithUser {
  endTime: String
  id: String!
  note: String
  startTime: String!
  user: SessionUser!
  userId: String!
}

input SessionsParams {
  startDate: String!
}

type UserToken {
  email: String!
  name: String!
  position: String!
  role: String!
  token: String!
}

type WorkHoursSummary {
  sessionsPerDay: Int!
  totalHours: String!
  userId: String!
  workDate: String!
}